/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(stylesheet) { return stylesheet; },
        function(rules) {
              return {
                type: 'StyleSheet',
                rules: extractList(rules, 0)}
            },
        ";",
        peg$literalExpectation(";", false),
        function(dec) { return dec },
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        function(media, rules) {
              return {
                type: "MediaRule",
                media: media,
                rules: rules
              };
            },
        ",",
        peg$literalExpectation(",", false),
        function(head, tail) { return buildList(head, tail, 2) },
        "only",
        peg$literalExpectation("only", false),
        "not",
        peg$literalExpectation("not", false),
        "and",
        peg$literalExpectation("and", false),
        function(prefix, type, x) { return x },
        function(prefix, type, exprs) { return { type:'MediaQuery', prefix, type, exprs }},
        function(head, x) { return x },
        function(head, tail) { return { type:'MediaQuery', exprs: buildList(head, tail, 2) }},
        "(",
        peg$literalExpectation("(", false),
        ":",
        peg$literalExpectation(":", false),
        function(feat, t) { return t },
        ")",
        peg$literalExpectation(")", false),
        function(feat, t) { return { type: 'MediaExpr', feature: feat, value: t }},
        "/",
        peg$literalExpectation("/", false),
        function() { return "/"; },
        function() { return ","; },
        "+",
        peg$literalExpectation("+", false),
        function() { return "+"; },
        ">",
        peg$literalExpectation(">", false),
        function() { return ">"; },
        function(name) { return name; },
        function(selectorsHead, selectorsTail, declarationsHead, declarationsTail) {
              
              return {
                type: "RuleSet",
                selectors: buildList(selectorsHead, selectorsTail, 2),
                declarations: buildList(declarationsHead, declarationsTail, 2)
              };
            },
        function(left, combinator, right) {
              return {
                type: "Selector",
                combinator: combinator,
                left: left,
                right: right
              };
            },
        function(left, right) {
              return {
                type: "Selector",
                combinator: " ",
                left: left,
                right: right
              };
            },
        function(selector) { return selector; },
        function(inter) { return  inter},
        function(element, qualifiers) {
              return {
                type: "SimpleSelector",
                element: element,
                all: element === '*',
                qualifiers: qualifiers
              };
            },
        function(qualifiers) {
              return {
                type: "SimpleSelector",
                element: "*",
                all: false,
                qualifiers: qualifiers
              };
            },
        function(stubsHead, stubsTail) {
              return {
                type: "Stubs",        
                stubs: buildList(stubsHead, stubsTail, 2)
              };
            },
        "-",
        peg$literalExpectation("-", false),
        function(stub_id) { return { type:'Stub', id: stub_id.join('').trim() } },
        function() { return { type: 'Contextual' } },
        function(id) { return { type: "IDSelector", id: id }; },
        ".",
        peg$literalExpectation(".", false),
        function(class_) { return { type: "ClassSelector", "class": class_ }; },
        "*",
        peg$literalExpectation("*", false),
        "[",
        peg$literalExpectation("[", false),
        "=",
        peg$literalExpectation("=", false),
        "]",
        peg$literalExpectation("]", false),
        function(attribute, operatorAndValue) {
              return {
                type: "AttributeSelector",
                attribute: attribute,
                operator: extractOptional(operatorAndValue, 0),
                value: extractOptional(operatorAndValue, 2)
              };
            },
        function(name, params) {
                  return {
                    type: "Function",
                    name: name,
                    params: params !== null ? [params[0]] : []
                  };
                },
        function(value) { return { type: "PseudoSelector", value: value }; },
        function(inter) { return inter },
        function(name, value, prio) {

              return {
                type: "Declaration",
                name: name,
                value: value,
                important: prio !== null
              };
            },
        function(head, tail) { return buildExpression(head, tail); },
        function(quantity) {
              return {
                type: "Quantity",
                value: quantity.value,
                unit: quantity.unit
              };
            },
        function(value) { return { type: "String", value: value }; },
        function(value) { return { type: "URI",    value: value }; },
        function(value) { return { type: "Ident",  value: value }; },
        function(name, params) {
              return { type: "Function", name: name, params: params };
            },
        function(value) { return { type: "Hexcolor", value: value }; },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        /^[\x80-\uFFFF]/,
        peg$classExpectation([["\x80", "\uFFFF"]], false, false),
        "\\",
        peg$literalExpectation("\\", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        /^[ \t\r\n\f]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        /^[^\r\n\f0-9a-f]/i,
        peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
        function(ch) { return ch; },
        /^[_a-z]/i,
        peg$classExpectation(["_", ["a", "z"]], false, true),
        /^[_a-z0-9\-]/i,
        peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^\n\r\f\\"]/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
        function(nl) { return ""; },
        function(chars) {
              return chars.join("");
            },
        "'",
        peg$literalExpectation("'", false),
        /^[^\n\r\f\\']/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
        "/*",
        peg$literalExpectation("/*", false),
        /^[^*]/,
        peg$classExpectation(["*"], true, false),
        /^[^\/*]/,
        peg$classExpectation(["/", "*"], true, false),
        function(prefix, start, chars) {
              return prefix + start + chars.join("");
            },
        function(chars) { return chars.join(""); },
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "e",
        peg$literalExpectation("e", false),
        function() {
              return parseFloat(text());
            },
        function() { return inter },
        /^[!#$%&*-[\]-~]/,
        peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
        function(chars) { chars.join(""); },
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\f",
        peg$literalExpectation("\f", false),
        "a",
        peg$literalExpectation("a", true),
        "0",
        peg$literalExpectation("0", false),
        /^[Aa]/,
        peg$classExpectation(["A", "a"], false, false),
        function() { return "a"; },
        "c",
        peg$literalExpectation("c", true),
        /^[Cc]/,
        peg$classExpectation(["C", "c"], false, false),
        function() { return "c"; },
        "d",
        peg$literalExpectation("d", true),
        /^[Dd]/,
        peg$classExpectation(["D", "d"], false, false),
        function() { return "d"; },
        peg$literalExpectation("e", true),
        /^[Ee]/,
        peg$classExpectation(["E", "e"], false, false),
        function() { return "e"; },
        "g",
        peg$literalExpectation("g", true),
        /^[Gg]/,
        peg$classExpectation(["G", "g"], false, false),
        "\\g",
        peg$literalExpectation("\\g", true),
        function() { return "g"; },
        "h",
        peg$literalExpectation("h", true),
        /^[Hh]/,
        peg$classExpectation(["H", "h"], false, false),
        "\\h",
        peg$literalExpectation("\\h", true),
        function() { return "h"; },
        "i",
        peg$literalExpectation("i", true),
        /^[Ii]/,
        peg$classExpectation(["I", "i"], false, false),
        "\\i",
        peg$literalExpectation("\\i", true),
        function() { return "i"; },
        "k",
        peg$literalExpectation("k", true),
        /^[Kk]/,
        peg$classExpectation(["K", "k"], false, false),
        "\\k",
        peg$literalExpectation("\\k", true),
        function() { return "k"; },
        "l",
        peg$literalExpectation("l", true),
        /^[Ll]/,
        peg$classExpectation(["L", "l"], false, false),
        "\\l",
        peg$literalExpectation("\\l", true),
        function() { return "l"; },
        "m",
        peg$literalExpectation("m", true),
        /^[Mm]/,
        peg$classExpectation(["M", "m"], false, false),
        "\\m",
        peg$literalExpectation("\\m", true),
        function() { return "m"; },
        "n",
        peg$literalExpectation("n", true),
        /^[Nn]/,
        peg$classExpectation(["N", "n"], false, false),
        "\\n",
        peg$literalExpectation("\\n", true),
        function() { return "n"; },
        "o",
        peg$literalExpectation("o", true),
        /^[Oo]/,
        peg$classExpectation(["O", "o"], false, false),
        "\\o",
        peg$literalExpectation("\\o", true),
        function() { return "o"; },
        "p",
        peg$literalExpectation("p", true),
        /^[Pp]/,
        peg$classExpectation(["P", "p"], false, false),
        "\\p",
        peg$literalExpectation("\\p", true),
        function() { return "p"; },
        "r",
        peg$literalExpectation("r", true),
        /^[Rr]/,
        peg$classExpectation(["R", "r"], false, false),
        "\\r",
        peg$literalExpectation("\\r", true),
        function() { return "r"; },
        "s",
        peg$literalExpectation("s", true),
        /^[Ss]/,
        peg$classExpectation(["S", "s"], false, false),
        "\\s",
        peg$literalExpectation("\\s", true),
        function() { return "s"; },
        "t",
        peg$literalExpectation("t", true),
        /^[Tt]/,
        peg$classExpectation(["T", "t"], false, false),
        "\\t",
        peg$literalExpectation("\\t", true),
        function() { return "t"; },
        "u",
        peg$literalExpectation("u", true),
        /^[Uu]/,
        peg$classExpectation(["U", "u"], false, false),
        "\\u",
        peg$literalExpectation("\\u", true),
        function() { return "u"; },
        "x",
        peg$literalExpectation("x", true),
        /^[Xx]/,
        peg$classExpectation(["X", "x"], false, false),
        "\\x",
        peg$literalExpectation("\\x", true),
        function() { return "x"; },
        "z",
        peg$literalExpectation("z", true),
        /^[Zz]/,
        peg$classExpectation(["Z", "z"], false, false),
        "\\z",
        peg$literalExpectation("\\z", true),
        function() { return "z"; },
        peg$otherExpectation("ampersand"),
        "&",
        peg$literalExpectation("&", false),
        peg$otherExpectation("whitespace"),
        peg$otherExpectation("<!--"),
        "<!--",
        peg$literalExpectation("<!--", false),
        peg$otherExpectation("-->"),
        "-->",
        peg$literalExpectation("-->", false),
        peg$otherExpectation("~="),
        "~=",
        peg$literalExpectation("~=", false),
        peg$otherExpectation("|="),
        "|=",
        peg$literalExpectation("|=", false),
        peg$otherExpectation("string"),
        function(string) { return string; },
        peg$otherExpectation("identifier"),
        function(ident) { return ident; },
        peg$otherExpectation("hash"),
        "#",
        peg$literalExpectation("#", false),
        function(name) { return "#" + name; },
        peg$otherExpectation("@import"),
        "@",
        peg$literalExpectation("@", false),
        peg$otherExpectation("@media"),
        peg$otherExpectation("!important"),
        "!",
        peg$literalExpectation("!", false),
        peg$otherExpectation("length"),
        function(value) { return { value: value, unit: "em" }; },
        function(value) { return { value: value, unit: "ex" }; },
        function(value) { return { value: value, unit: "px" }; },
        function(value) { return { value: value, unit: "cm" }; },
        function(value) { return { value: value, unit: "mm" }; },
        function(value) { return { value: value, unit: "in" }; },
        function(value) { return { value: value, unit: "pt" }; },
        function(value) { return { value: value, unit: "pc" }; },
        peg$otherExpectation("angle"),
        function(value) { return { value: value, unit: "deg"  }; },
        function(value) { return { value: value, unit: "rad"  }; },
        function(value) { return { value: value, unit: "grad" }; },
        peg$otherExpectation("time"),
        function(value) { return { value: value, unit: "ms" }; },
        function(value) { return { value: value, unit: "s"  }; },
        peg$otherExpectation("frequency"),
        function(value) { return { value: value, unit: "hz" }; },
        function(value) { return { value: value, unit: "kh" }; },
        peg$otherExpectation("percentage"),
        "%",
        peg$literalExpectation("%", false),
        function(value) { return { value: value, unit: "%" }; },
        peg$otherExpectation("number"),
        function(value) { return { value: value, unit: null }; },
        peg$otherExpectation("uri"),
        peg$literalExpectation("(", true),
        function(url) { return url; },
        peg$otherExpectation("function")
      ],

      peg$bytecode = [
        peg$decode("%$;C0#*;C&/A#;!/8$$;C0#*;C&/($8#: #!!)(#'#(\"'#&'#"),
        peg$decode("%$%;-./ &;*.) &;#.# &;\"/\xA7#$%;a/3#$;`0#*;`&/#$+\")(\"'#&'#.= &%;b/3#$;`0#*;`&/#$+\")(\"'#&'#0]*%;a/3#$;`0#*;`&/#$+\")(\"'#&'#.= &%;b/3#$;`0#*;`&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#0\xC3*%;-./ &;*.) &;#.# &;\"/\xA7#$%;a/3#$;`0#*;`&/#$+\")(\"'#&'#.= &%;b/3#$;`0#*;`&/#$+\")(\"'#&'#0]*%;a/3#$;`0#*;`&/#$+\")(\"'#&'#.= &%;b/3#$;`0#*;`&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#&/' 8!:!!! )"),
        peg$decode("%;5/W#$;`0#*;`&/G$2\"\"\"6\"7#/8$$;`0#*;`&/($8$:$$!#)($'#(#'#(\"'#&'#"),
        peg$decode("%;i/\xA8#$;`0#*;`&/\x98$;$/\x8F$2%\"\"6%7&/\x80$$;`0#*;`&/p$$;-.) &;*.# &;\"0/*;-.) &;*.# &;\"&/H$2'\"\"6'7(/9$$;`0#*;`&/)$8(:)(\"%\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;%/\x8B#$%2*\"\"6*7+/<#$;`0#*;`&/,$;%/#$+#)(#'#(\"'#&'#0L*%2*\"\"6*7+/<#$;`0#*;`&/,$;%/#$+#)(#'#(\"'#&'#&/)$8\":,\"\"! )(\"'#&'#"),
        peg$decode("%2-\"\"6-7..) &2/\"\"6/70.\" &\"/\xF5#$;`0#*;`&/\xE5$;..# &;)/\xD6$$;`0#*;`&/\xC6$$%21\"\"6172/Y#$;`0#*;`&/I$;..# &;&/:$$;`0#*;`&/*$8$:3$#)'!)($'#(#'#(\"'#&'#0i*%21\"\"6172/Y#$;`0#*;`&/I$;..# &;&/:$$;`0#*;`&/*$8$:3$#)'!)($'#(#'#(\"'#&'#&/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#.\xE3 &%;..# &;&/\xD3#$%21\"\"6172/X#$;`0#*;`&/H$;..# &;&/9$$;`0#*;`&/)$8$:5$\"&!)($'#(#'#(\"'#&'#0h*%21\"\"6172/X#$;`0#*;`&/H$;..# &;&/9$$;`0#*;`&/)$8$:5$\"&!)($'#(#'#(\"'#&'#&/9$$;`0#*;`&/)$8#:6#\"\"!)(#'#(\"'#&'#"),
        peg$decode("%27\"\"6778/\xE9#$;`0#*;`&/\xD9$;)/\xD0$$;`0#*;`&/\xC0$$%29\"\"697:.\" &\"/B#$;`0#*;`&/2$;8/)$8#:;#\"& )(#'#(\"'#&'#0W*%29\"\"697:.\" &\"/B#$;`0#*;`&/2$;8/)$8#:;#\"& )(#'#(\"'#&'#&/H$$;`0#*;`&/8$2<\"\"6<7=/)$8':>'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2?\"\"6?7@/7#$;`0#*;`&/'$8\":A\" )(\"'#&'#.G &%2*\"\"6*7+/7#$;`0#*;`&/'$8\":B\" )(\"'#&'#"),
        peg$decode("%2C\"\"6C7D/7#$;`0#*;`&/'$8\":E\" )(\"'#&'#.G &%2F\"\"6F7G/7#$;`0#*;`&/'$8\":H\" )(\"'#&'#"),
        peg$decode("%;f/8#$;`0#*;`&/($8\":I\"!!)(\"'#&'#"),
        peg$decode("%;+/\u0145#$%2*\"\"6*7+/<#$;`0#*;`&/,$;+/#$+#)(#'#(\"'#&'#0L*%2*\"\"6*7+/<#$;`0#*;`&/,$;+/#$+#)(#'#(\"'#&'#&/\xE3$2%\"\"6%7&/\xD4$$;`0#*;`&/\xC4$;5.\" &\"/\xB6$$%2\"\"\"6\"7#/A#$;`0#*;`&/1$;5.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2\"\"\"6\"7#/A#$;`0#*;`&/1$;5.\" &\"/#$+#)(#'#(\"'#&'#&/J$2'\"\"6'7(/;$$;`0#*;`&/+$8(:J($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;,/L#$;`0#*;`&/<$;(/3$;+/*$8$:K$##! )($'#(#'#(\"'#&'#.w &%;,/H#$;`/&#0#*;`&&&#/2$;+/)$8#:L#\"\" )(#'#(\"'#&'#.B &%;,/8#$;`0#*;`&/($8\":M\"!!)(\"'#&'#"),
        peg$decode("%;./' 8!:N!! ).\xDA &%;2/u#$;..; &;0.5 &;1./ &;3.) &;4.# &;/0A*;..; &;0.5 &;1./ &;3.) &;4.# &;/&/)$8\":O\"\"! )(\"'#&'#.x &%$;..; &;0.5 &;1./ &;3.) &;4.# &;//D#0A*;..; &;0.5 &;1./ &;3.) &;4.# &;/&&&#/' 8!:P!! )"),
        peg$decode("%;./\x95#$%2\"\"\"6\"7#/A#$;`0#*;`&/1$;..\" &\"/#$+#)(#'#(\"'#&'#0Q*%2\"\"\"6\"7#/A#$;`0#*;`&/1$;..\" &\"/#$+#)(#'#(\"'#&'#&/)$8\":Q\"\"! )(\"'#&'#"),
        peg$decode("%%;Z/V#;X/M$;\\/D$;Y/;$2R\"\"6R7S/,$;F/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/8#$;`0#*;`&/($8\":T\"!!)(\"'#&'#"),
        peg$decode("%;_/& 8!:U! )"),
        peg$decode("%;g/' 8!:V!! )"),
        peg$decode("%2W\"\"6W7X/1#;f/($8\":Y\"! )(\"'#&'#"),
        peg$decode(";f.) &2Z\"\"6Z7["),
        peg$decode("%2\\\"\"6\\7]/\xBA#$;`0#*;`&/\xAA$;f/\xA1$$;`0#*;`&/\x91$%2^\"\"6^7_.) &;c.# &;d/R#$;`0#*;`&/B$;f.# &;e/3$$;`0#*;`&/#$+$)($'#(#'#(\"'#&'#.\" &\"/8$2`\"\"6`7a/)$8&:b&\"#!)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%29\"\"697:/\x8E#%;t/p#$;`0#*;`&/`$%;f/3#$;`0#*;`&/#$+\")(\"'#&'#.\" &\"/8$2<\"\"6<7=/)$8$:c$\"#!)($'#(#'#(\"'#&'#.# &;f/($8\":d\"! )(\"'#&'#"),
        peg$decode("%;./' 8!:e!! ).j &%;)/`#29\"\"697:/Q$$;`0#*;`&/A$;7/8$;6.\" &\"/*$8%:f%#$! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;j/3#$;`0#*;`&/#$+\")(\"'#&'#"),
        peg$decode("%;8/i#$%;'.\" &\"/,#;8/#$+\")(\"'#&'#0;*%;'.\" &\"/,#;8/#$+\")(\"'#&'#&/)$8\":g\"\"! )(\"'#&'#"),
        peg$decode("%;./' 8!:e!! ).\xE7 &%;q.G &;m.A &;k.; &;l.5 &;n./ &;o.) &;p.# &;r/8#$;`0#*;`&/($8\":h\"!!)(\"'#&'#.\x98 &%;e/8#$;`0#*;`&/($8\":i\"!!)(\"'#&'#.s &%;s/8#$;`0#*;`&/($8\":j\"!!)(\"'#&'#.N &;9.H &;:.B &%;f/8#$;`0#*;`&/($8\":k\"!!)(\"'#&'#"),
        peg$decode("%;t/a#$;`0#*;`&/Q$;7/H$2<\"\"6<7=/9$$;`0#*;`&/)$8%:l%\"$\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;g/8#$;`0#*;`&/($8\":m\"!!)(\"'#&'#"),
        peg$decode("4n\"\"5!7o"),
        peg$decode("4p\"\"5!7q"),
        peg$decode("%2r\"\"6r7s/\xA8#%%;;/i#;;.\" &\"/[$;;.\" &\"/M$;;.\" &\"/?$;;.\" &\"/1$;;.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/($8#:x#!!)(#'#(\"'#&'#"),
        peg$decode(";=.G &%2r\"\"6r7s/7#4y\"\"5!7z/($8\":{\"! )(\"'#&'#"),
        peg$decode("4|\"\"5!7}.) &;<.# &;>"),
        peg$decode("4~\"\"5!7\x7F.) &;<.# &;>"),
        peg$decode("%2\x80\"\"6\x807\x81/\xA7#$4\x82\"\"5!7\x83.G &%2r\"\"6r7s/1#;K/($8\":\x84\"! )(\"'#&'#.# &;>0S*4\x82\"\"5!7\x83.G &%2r\"\"6r7s/1#;K/($8\":\x84\"! )(\"'#&'#.# &;>&/7$2\x80\"\"6\x807\x81/($8#:\x85#!!)(#'#(\"'#&'#"),
        peg$decode("%2\x86\"\"6\x867\x87/\xA7#$4\x88\"\"5!7\x89.G &%2r\"\"6r7s/1#;K/($8\":\x84\"! )(\"'#&'#.# &;>0S*4\x88\"\"5!7\x89.G &%2r\"\"6r7s/1#;K/($8\":\x84\"! )(\"'#&'#.# &;>&/7$2\x86\"\"6\x867\x87/($8#:\x85#!!)(#'#(\"'#&'#"),
        peg$decode("%2\x8A\"\"6\x8A7\x8B/\u011C#$4\x8C\"\"5!7\x8D0)*4\x8C\"\"5!7\x8D&/\u0100$$2Z\"\"6Z7[/,#0)*2Z\"\"6Z7[&&&#/\xDE$$%4\x8E\"\"5!7\x8F/a#$4\x8C\"\"5!7\x8D0)*4\x8C\"\"5!7\x8D&/E$$2Z\"\"6Z7[/,#0)*2Z\"\"6Z7[&&&#/#$+#)(#'#(\"'#&'#0q*%4\x8E\"\"5!7\x8F/a#$4\x8C\"\"5!7\x8D0)*4\x8C\"\"5!7\x8D&/E$$2Z\"\"6Z7[/,#0)*2Z\"\"6Z7[&&&#/#$+#)(#'#(\"'#&'#&/2$2?\"\"6?7@/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%2R\"\"6R7S.\" &\"/\"!&,)/C#;?/:$$;@0#*;@&/*$8#:\x90##\"! )(#'#(\"'#&'#"),
        peg$decode("%$;@/&#0#*;@&&&#/' 8!:\x91!! )"),
        peg$decode("%4\x92\"\"5!7\x93.\" &\"/\xF1#$4\x94\"\"5!7\x95/,#0)*4\x94\"\"5!7\x95&&&#.q &%$4\x94\"\"5!7\x950)*4\x94\"\"5!7\x95&/T#2W\"\"6W7X/E$$4\x94\"\"5!7\x95/,#0)*4\x94\"\"5!7\x95&&&#/#$+#)(#'#(\"'#&'#/{$%2\x96\"\"6\x967\x97/Y#4\x92\"\"5!7\x93.\" &\"/E$$4\x94\"\"5!7\x95/,#0)*4\x94\"\"5!7\x95&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\x98# )(#'#(\"'#&'#"),
        peg$decode(";A.# &;B"),
        peg$decode("%;./& 8!:\x99! ).Z &%$4\x9A\"\"5!7\x9B.) &;<.# &;>05*4\x9A\"\"5!7\x9B.) &;<.# &;>&/' 8!:\x9C!! )"),
        peg$decode("$4v\"\"5!7w/,#0)*4v\"\"5!7w&&&#"),
        peg$decode(";I.\" &\""),
        peg$decode("2\x9D\"\"6\x9D7\x9E.A &2t\"\"6t7u.5 &2\x9F\"\"6\x9F7\xA0.) &2\xA1\"\"6\xA17\xA2"),
        peg$decode("3\xA3\"\"5!7\xA4.\xB6 &%2r\"\"6r7s/\xA6#2\xA5\"\"6\xA57\xA6.\" &\"/\x92$2\xA5\"\"6\xA57\xA6.\" &\"/~$2\xA5\"\"6\xA57\xA6.\" &\"/j$2\xA5\"\"6\xA57\xA6.\" &\"/V$4\xA7\"\"5!7\xA8/G$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/'$8':\xA9' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\xAA\"\"5!7\xAB.\xB6 &%2r\"\"6r7s/\xA6#2\xA5\"\"6\xA57\xA6.\" &\"/\x92$2\xA5\"\"6\xA57\xA6.\" &\"/~$2\xA5\"\"6\xA57\xA6.\" &\"/j$2\xA5\"\"6\xA57\xA6.\" &\"/V$4\xAC\"\"5!7\xAD/G$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/'$8':\xAE' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\xAF\"\"5!7\xB0.\xB6 &%2r\"\"6r7s/\xA6#2\xA5\"\"6\xA57\xA6.\" &\"/\x92$2\xA5\"\"6\xA57\xA6.\" &\"/~$2\xA5\"\"6\xA57\xA6.\" &\"/j$2\xA5\"\"6\xA57\xA6.\" &\"/V$4\xB1\"\"5!7\xB2/G$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/'$8':\xB3' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\x96\"\"5!7\xB4.\xB6 &%2r\"\"6r7s/\xA6#2\xA5\"\"6\xA57\xA6.\" &\"/\x92$2\xA5\"\"6\xA57\xA6.\" &\"/~$2\xA5\"\"6\xA57\xA6.\" &\"/j$2\xA5\"\"6\xA57\xA6.\" &\"/V$4\xB5\"\"5!7\xB6/G$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/'$8':\xB7' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\xB8\"\"5!7\xB9.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xBA\"\"5!7\xBB/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xBC\"\"5\"7\xBD/& 8!:\xBE! )"),
        peg$decode("3\xBF\"\"5!7\xC0.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xC1\"\"5!7\xC2/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xC3\"\"5\"7\xC4/& 8!:\xC5! )"),
        peg$decode("3\xC6\"\"5!7\xC7.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xC8\"\"5!7\xC9/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xCA\"\"5\"7\xCB/& 8!:\xCC! )"),
        peg$decode("3\xCD\"\"5!7\xCE.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xCF\"\"5!7\xD0/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xD1\"\"5\"7\xD2/& 8!:\xD3! )"),
        peg$decode("3\xD4\"\"5!7\xD5.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xD6\"\"5!7\xD7/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xD8\"\"5\"7\xD9/& 8!:\xDA! )"),
        peg$decode("3\xDB\"\"5!7\xDC.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xDD\"\"5!7\xDE/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xDF\"\"5\"7\xE0/& 8!:\xE1! )"),
        peg$decode("3\xE2\"\"5!7\xE3.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xE4\"\"5!7\xE5/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xE6\"\"5\"7\xE7/& 8!:\xE8! )"),
        peg$decode("3\xE9\"\"5!7\xEA.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xEB\"\"5!7\xEC/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xED\"\"5\"7\xEE/& 8!:\xEF! )"),
        peg$decode("3\xF0\"\"5!7\xF1.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xF2\"\"5!7\xF3/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xF4\"\"5\"7\xF5/& 8!:\xF6! )"),
        peg$decode("3\xF7\"\"5!7\xF8.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\xF9\"\"5!7\xFA/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xFB\"\"5\"7\xFC/& 8!:\xFD! )"),
        peg$decode("3\xFE\"\"5!7\xFF.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\u0100\"\"5!7\u0101/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0102\"\"5\"7\u0103/& 8!:\u0104! )"),
        peg$decode("3\u0105\"\"5!7\u0106.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\u0107\"\"5!7\u0108/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0109\"\"5\"7\u010A/& 8!:\u010B! )"),
        peg$decode("3\u010C\"\"5!7\u010D.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\u010E\"\"5!7\u010F/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0110\"\"5\"7\u0111/& 8!:\u0112! )"),
        peg$decode("3\u0113\"\"5!7\u0114.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\u0115\"\"5!7\u0116/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0117\"\"5\"7\u0118/& 8!:\u0119! )"),
        peg$decode("3\u011A\"\"5!7\u011B.\xC9 &%2r\"\"6r7s/\xA2#2\xA5\"\"6\xA57\xA6.\" &\"/\x8E$2\xA5\"\"6\xA57\xA6.\" &\"/z$2\xA5\"\"6\xA57\xA6.\" &\"/f$2\xA5\"\"6\xA57\xA6.\" &\"/R$4\u011C\"\"5!7\u011D/C$2t\"\"6t7u.) &4v\"\"5!7w.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u011E\"\"5\"7\u011F/& 8!:\u0120! )"),
        peg$decode("<2\u0122\"\"6\u01227\u0123=.\" 7\u0121"),
        peg$decode("<%$;C0#*;C&/,#;I/#$+\")(\"'#&'#=.\" 7\u0124"),
        peg$decode("<%$;C0#*;C&/2#2\u0126\"\"6\u01267\u0127/#$+\")(\"'#&'#=.\" 7\u0125"),
        peg$decode("<%$;C0#*;C&/2#2\u0129\"\"6\u01297\u012A/#$+\")(\"'#&'#=.\" 7\u0128"),
        peg$decode("<%$;C0#*;C&/2#2\u012C\"\"6\u012C7\u012D/#$+\")(\"'#&'#=.\" 7\u012B"),
        peg$decode("<%$;C0#*;C&/2#2\u012F\"\"6\u012F7\u0130/#$+\")(\"'#&'#=.\" 7\u012E"),
        peg$decode("<%$;C0#*;C&/1#;G/($8\":\u0132\"! )(\"'#&'#=.\" 7\u0131"),
        peg$decode("<%$;C0#*;C&/1#;D/($8\":\u0134\"! )(\"'#&'#=.\" 7\u0133"),
        peg$decode("<%$;C0#*;C&/@#2\u0136\"\"6\u01367\u0137/1$;E/($8#:\u0138#! )(#'#(\"'#&'#=.\" 7\u0135"),
        peg$decode("<%$;C0#*;C&/h#2\u013A\"\"6\u013A7\u013B/Y$;R/P$;U/G$;X/>$;W/5$;Y/,$;[/#$+()(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0139"),
        peg$decode("<%$;C0#*;C&/_#2\u013A\"\"6\u013A7\u013B/P$;U/G$;O/>$;N/5$;R/,$;L/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013C"),
        peg$decode("<%$;C0#*;C&/\x9F#2\u013E\"\"6\u013E7\u013F/\x90$$;I.# &;C0)*;I.# &;C&/t$;R/k$;U/b$;X/Y$;W/P$;Y/G$;[/>$;L/5$;V/,$;[/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013D"),
        peg$decode("<%$;C0#*;C&/C#;F/:$;O/1$;U/($8$:\u0141$!\")($'#(#'#(\"'#&'#=.\" 7\u0140"),
        peg$decode("<%$;C0#*;C&/C#;F/:$;O/1$;]/($8$:\u0142$!\")($'#(#'#(\"'#&'#=.\" 7\u0140"),
        peg$decode("<%$;C0#*;C&/C#;F/:$;X/1$;]/($8$:\u0143$!\")($'#(#'#(\"'#&'#.\u0130 &%$;C0#*;C&/C#;F/:$;M/1$;U/($8$:\u0144$!\")($'#(#'#(\"'#&'#.\xF9 &%$;C0#*;C&/C#;F/:$;U/1$;U/($8$:\u0145$!\")($'#(#'#(\"'#&'#.\xC2 &%$;C0#*;C&/C#;F/:$;R/1$;V/($8$:\u0146$!\")($'#(#'#(\"'#&'#.\x8B &%$;C0#*;C&/C#;F/:$;X/1$;[/($8$:\u0147$!\")($'#(#'#(\"'#&'#.T &%$;C0#*;C&/C#;F/:$;X/1$;M/($8$:\u0148$!\")($'#(#'#(\"'#&'#=.\" 7\u0140"),
        peg$decode("<%$;C0#*;C&/L#;F/C$;N/:$;O/1$;P/($8%:\u014A%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;C0#*;C&/L#;F/C$;Y/:$;L/1$;N/($8%:\u014B%!#)(%'#($'#(#'#(\"'#&'#.f &%$;C0#*;C&/U#;F/L$;P/C$;Y/:$;L/1$;N/($8&:\u014C&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0149"),
        peg$decode("<%$;C0#*;C&/C#;F/:$;U/1$;Z/($8$:\u014E$!\")($'#(#'#(\"'#&'#.K &%$;C0#*;C&/:#;F/1$;Z/($8#:\u014F#!!)(#'#(\"'#&'#=.\" 7\u014D"),
        peg$decode("<%$;C0#*;C&/C#;F/:$;Q/1$;^/($8$:\u0151$!\")($'#(#'#(\"'#&'#.] &%$;C0#*;C&/L#;F/C$;S/:$;Q/1$;^/($8%:\u0152%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u0150"),
        peg$decode("<%$;C0#*;C&/@#;F/7$2\u0154\"\"6\u01547\u0155/($8#:\u0156#!!)(#'#(\"'#&'#=.\" 7\u0153"),
        peg$decode("<%$;C0#*;C&/1#;F/($8\":\u0158\"! )(\"'#&'#=.\" 7\u0157"),
        peg$decode("<%$;C0#*;C&/|#;\\/s$;Y/j$;T/a$37\"\"5!7\u015A/R$;J/I$;G/@$;J/7$2<\"\"6<7=/($8):\u015B)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;C0#*;C&/|#;\\/s$;Y/j$;T/a$37\"\"5!7\u015A/R$;J/I$;H/@$;J/7$2<\"\"6<7=/($8):\u015B)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0159"),
        peg$decode("<%$;C0#*;C&/@#;D/7$27\"\"6778/($8#:I#!!)(#'#(\"'#&'#=.\" 7\u015C")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: "Expression",
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
