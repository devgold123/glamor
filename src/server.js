import { styleSheet } from './index.js'

/**** serverside stuff ****/

// the api's copied from aphrodite, with 1 key difference 
// we include *all* the css generated by the app 
// to optimize to only include generated styles on the pages 
// use renderStaticOptimized
export function renderStatic(fn, optimized = false) {
  let html = fn()
  if(html === undefined) {
    throw new Error('did you forget to return from renderToString?')
  }
  let rules = styleSheet.rules(), css = rules.map(r => r.cssText).join('')
  if(optimized) {
    // parse out ids from html
    // reconstruct css/rules/cache to pass

    let o = { html, ids: [], css: '', rules: [] }
    let regex = /data\-css\-([a-zA-Z0-9]+)=/gm
    let match, ids = [], insertedIDs = {}
    while((match = regex.exec(html)) !== null) {
      if(!insertedIDs[match[1] + '']) {
        ids.push(match[1])  
        insertedIDs[match[1] + ''] = true
      }
    }
    ids.forEach(id => {
      // o.cache[id] = styleSheet.cache[id]
      o.ids.push(id)
      // todo - add fonts / animations
      // todo - add raw rules (without any data-css stuff)
      o.css+= rules
        .map(x => x.cssText)
        .filter(r => new RegExp(`\\\[data\-css\-${id}\\\]`).test(r))
        .map(x => (o.rules.push(x), x))
        .join('')

    })
    return o

  }
  return { html, ids: Object.keys(styleSheet.inserted), css, rules }
}

export function renderStaticOptimized(fn) {
  return renderStatic(fn, true)
}

